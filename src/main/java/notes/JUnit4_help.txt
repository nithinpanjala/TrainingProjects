Introduction to JUnit Framework
-------------------------------
- JUnit is a unit testing framework for Java programming language. 
- JUnit has been important in the development of test-driven development(TDD) / Business Driven development (BDD)
- JUnit is a testing framework that developers use for writing test cases while developing the software.
-  We would write and run test cases for every function we write. So using this, we make sure that every single line of code will be    tested.
- Every time you make a small or a big modification in the code (in any function), you can make sure that the function is performing   well and has not broken any older functionality by executing all JUnit test cases in one go written for that function. So, you write   a test case once, and go on using the test case, again and again, to make sure that- every time software is modified it is working   as expected.
- JUnit has become a standard for testing in Java programming language and is supported by almost all IDE’s e.g Netbeans, Eclipse etc.   So, you work in any standardized IDE environment

JUnit features include:
-----------------------
1) Assertions for testing expected results.
2) Test fixtures for sharing common test data.
3) Test runners for running tests JUnit 


Fixture
-------
- The purpose of a test fixture is to ensure that there is a well known and fixed environment in which tests are run so that results   are repeatable.
- In Junit4 there is no setup() or tearDown() method and instead of that we have @Before and @After annotations


Demo :
 pom.xml 

	<properties>
		<maven.compiler.source>1.8</maven.compiler.source>
		<maven.compiler.target>1.8</maven.compiler.target>
	</properties>
	<dependencies>
		<!-- https://mvnrepository.com/artifact/junit/junit -->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.12</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.hamcrest</groupId>
			<artifactId>hamcrest-library</artifactId>
			<version>1.3</version>
			<scope>test</scope>
		</dependency>
	</dependencies>
</project>


or 

include junit4.jar in your Classpath. (Eclipse inbuilt )



Project Packaging Structure (Maven project)
--------------------------------------------

a) src/main/java – Java Source code packages and classes
b) src/main/resources – NON-Java Resources, such as property files and Spring configuration

Test
c) src/test/java – Test Source code packages and classes
d) src/test/resources – NON-Java Resources, such as property files and Spring configuration

JUnit 4 Annotations
------------------

@Before and @After

@BeforeClass and @AfterClass

@Test

@Ignore

@Test(timeout=500)

@Test(expected=IllegalArgumentException.class)



@Before and @After
----------------
- In Junit4 there is no setup() or tearDown() method and instead of that we have @Before and @After annotations. By using @Before you   can make any method as setup() and by using @After you can make any method as teardown(). What is most important point to remember   is @Before and @After annotated method will be invoked before and after "each test case".

@BeforeClass and @AfterClass
----------------------------
 - @BeforeClass and @AfterClass JUnit4 Annotations are similar to @After and @Before with only exception that they are called on per    TestClass basis and not on per test basis.  

- They can be used as one time.

- Must be static 

ex :	  @BeforeClass
	  public static void setUpClass() throws Exception 


Note :
- Run test using IDE or command line or if the project maven using "mvn test" command.

cmd > mvn test




JUnit 4 Assertions
------------------
- JUnit provides overloaded assertion methods for all primitive types and Objects and arrays (of primitives or Objects). 
- The parameter order is expected value followed by an actual value.

 All the assertion methods.

	1) import static org.junit.Assert.assertArrayEquals;
	2) import static org.junit.Assert.assertEquals;
	3) import static org.junit.Assert.assertFalse;
	4) import static org.junit.Assert.assertNotNull;
	5) import static org.junit.Assert.assertNotSame;
	6) import static org.junit.Assert.assertNull;
	7) import static org.junit.Assert.assertSame;
	8) import static org.junit.Assert.assertThat;
	9) import static org.junit.Assert.assertTrue;
	

Note :
There is a slightly different assertion, assertThat that has parameters of the optional failure message, the actual value, and a Matcher object. Note that expected and actual are reversed compared to the other assert methods.

Syntax :

	a) assertSame(expected, actual)
	b) assertEquals( "message", expected, actual) //"message" string will be appended in the failure message if the assertion 			fails.




import static org.hamcrest.CoreMatchers.allOf;
import static org.hamcrest.CoreMatchers.anyOf;
import static org.hamcrest.CoreMatchers.both;
import static org.hamcrest.CoreMatchers.containsString;
import static org.hamcrest.CoreMatchers.equalTo;
import static org.hamcrest.CoreMatchers.everyItem;
import static org.hamcrest.CoreMatchers.hasItems;
import static org.hamcrest.CoreMatchers.not;
import static org.hamcrest.CoreMatchers.sameInstance;
import static org.hamcrest.CoreMatchers.startsWith;
import static org.junit.Assert.assertArrayEquals;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNotSame;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertSame;
import static org.junit.Assert.assertThat;
import static org.junit.Assert.assertTrue;

import java.util.Arrays;

import org.hamcrest.core.CombinableMatcher;
import org.junit.Test;




import org.junit.runner.RunWith;
import org.junit.runners.Suite;

@RunWith(Suite.class)
@Suite.SuiteClasses({ LoginServiceTest.class, UserServiceTest.class, })
public class SuiteTest {

}